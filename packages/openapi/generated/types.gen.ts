// This file is auto-generated by @hey-api/openapi-ts

export type LanguagePack = {
    data?: {
        '_.code'?: string;
        '_.name'?: string;
        'admin.errorMarshallingConfig'?: string;
        'analytics.count'?: string;
        'analytics.fromDate'?: string;
        'analytics.invalidDates'?: string;
        'analytics.isUnique'?: string;
        'analytics.links'?: string;
        'analytics.nonUnique'?: string;
        'analytics.title'?: string;
        'analytics.toDate'?: string;
        'bounces.source'?: string;
        'bounces.unknownService'?: string;
        'bounces.view'?: string;
        'campaigns.addAltText'?: string;
        'campaigns.archive'?: string;
        'campaigns.archiveEnable'?: string;
        'campaigns.archiveHelp'?: string;
        'campaigns.archiveMeta'?: string;
        'campaigns.archiveMetaHelp'?: string;
        'campaigns.cantUpdate'?: string;
        'campaigns.clicks'?: string;
        'campaigns.confirmDelete'?: string;
        'campaigns.confirmSchedule'?: string;
        'campaigns.confirmSwitchFormat'?: string;
        'campaigns.content'?: string;
        'campaigns.contentHelp'?: string;
        'campaigns.continue'?: string;
        'campaigns.copyOf'?: string;
        'campaigns.customHeadersHelp'?: string;
        'campaigns.dateAndTime'?: string;
        'campaigns.ended'?: string;
        'campaigns.errorSendTest'?: string;
        'campaigns.fieldInvalidBody'?: string;
        'campaigns.fieldInvalidFromEmail'?: string;
        'campaigns.fieldInvalidListIDs'?: string;
        'campaigns.fieldInvalidMessenger'?: string;
        'campaigns.fieldInvalidName'?: string;
        'campaigns.fieldInvalidSendAt'?: string;
        'campaigns.fieldInvalidSubject'?: string;
        'campaigns.formatHTML'?: string;
        'campaigns.fromAddress'?: string;
        'campaigns.fromAddressPlaceholder'?: string;
        'campaigns.invalid'?: string;
        'campaigns.invalidCustomHeaders'?: string;
        'campaigns.markdown'?: string;
        'campaigns.needsSendAt'?: string;
        'campaigns.newCampaign'?: string;
        'campaigns.noKnownSubsToTest'?: string;
        'campaigns.noOptinLists'?: string;
        'campaigns.noSubs'?: string;
        'campaigns.noSubsToTest'?: string;
        'campaigns.notFound'?: string;
        'campaigns.onlyActiveCancel'?: string;
        'campaigns.onlyActivePause'?: string;
        'campaigns.onlyDraftAsScheduled'?: string;
        'campaigns.onlyPausedDraft'?: string;
        'campaigns.onlyScheduledAsDraft'?: string;
        'campaigns.pause'?: string;
        'campaigns.plainText'?: string;
        'campaigns.preview'?: string;
        'campaigns.progress'?: string;
        'campaigns.queryPlaceholder'?: string;
        'campaigns.rateMinuteShort'?: string;
        'campaigns.rawHTML'?: string;
        'campaigns.removeAltText'?: string;
        'campaigns.richText'?: string;
        'campaigns.schedule'?: string;
        'campaigns.scheduled'?: string;
        'campaigns.send'?: string;
        'campaigns.sendLater'?: string;
        'campaigns.sendTest'?: string;
        'campaigns.sendTestHelp'?: string;
        'campaigns.sendToLists'?: string;
        'campaigns.sent'?: string;
        'campaigns.start'?: string;
        'campaigns.started'?: string;
        'campaigns.startedAt'?: string;
        'campaigns.stats'?: string;
        'campaigns.status.cancelled'?: string;
        'campaigns.status.draft'?: string;
        'campaigns.status.finished'?: string;
        'campaigns.status.paused'?: string;
        'campaigns.status.running'?: string;
        'campaigns.status.scheduled'?: string;
        'campaigns.statusChanged'?: string;
        'campaigns.subject'?: string;
        'campaigns.testEmails'?: string;
        'campaigns.testSent'?: string;
        'campaigns.timestamps'?: string;
        'campaigns.trackLink'?: string;
        'campaigns.views'?: string;
        'dashboard.campaignViews'?: string;
        'dashboard.linkClicks'?: string;
        'dashboard.messagesSent'?: string;
        'dashboard.orphanSubs'?: string;
        'email.data.info'?: string;
        'email.data.title'?: string;
        'email.optin.confirmSub'?: string;
        'email.optin.confirmSubHelp'?: string;
        'email.optin.confirmSubInfo'?: string;
        'email.optin.confirmSubTitle'?: string;
        'email.optin.confirmSubWelcome'?: string;
        'email.optin.privateList'?: string;
        'email.status.campaignReason'?: string;
        'email.status.campaignSent'?: string;
        'email.status.campaignUpdateTitle'?: string;
        'email.status.importFile'?: string;
        'email.status.importRecords'?: string;
        'email.status.importTitle'?: string;
        'email.status.status'?: string;
        'email.unsub'?: string;
        'email.unsubHelp'?: string;
        'email.viewInBrowser'?: string;
        'forms.formHTML'?: string;
        'forms.formHTMLHelp'?: string;
        'forms.noPublicLists'?: string;
        'forms.publicLists'?: string;
        'forms.publicSubPage'?: string;
        'forms.selectHelp'?: string;
        'forms.title'?: string;
        'globals.buttons.add'?: string;
        'globals.buttons.addNew'?: string;
        'globals.buttons.back'?: string;
        'globals.buttons.cancel'?: string;
        'globals.buttons.clone'?: string;
        'globals.buttons.close'?: string;
        'globals.buttons.continue'?: string;
        'globals.buttons.delete'?: string;
        'globals.buttons.deleteAll'?: string;
        'globals.buttons.edit'?: string;
        'globals.buttons.enabled'?: string;
        'globals.buttons.insert'?: string;
        'globals.buttons.learnMore'?: string;
        'globals.buttons.more'?: string;
        'globals.buttons.new'?: string;
        'globals.buttons.ok'?: string;
        'globals.buttons.remove'?: string;
        'globals.buttons.save'?: string;
        'globals.buttons.saveChanges'?: string;
        'globals.days.0'?: string;
        'globals.days.1'?: string;
        'globals.days.2'?: string;
        'globals.days.3'?: string;
        'globals.days.4'?: string;
        'globals.days.5'?: string;
        'globals.days.6'?: string;
        'globals.days.7'?: string;
        'globals.fields.createdAt'?: string;
        'globals.fields.description'?: string;
        'globals.fields.id'?: string;
        'globals.fields.name'?: string;
        'globals.fields.status'?: string;
        'globals.fields.type'?: string;
        'globals.fields.updatedAt'?: string;
        'globals.fields.uuid'?: string;
        'globals.messages.confirm'?: string;
        'globals.messages.confirmDiscard'?: string;
        'globals.messages.created'?: string;
        'globals.messages.deleted'?: string;
        'globals.messages.deletedCount'?: string;
        'globals.messages.done'?: string;
        'globals.messages.emptyState'?: string;
        'globals.messages.errorCreating'?: string;
        'globals.messages.errorDeleting'?: string;
        'globals.messages.errorFetching'?: string;
        'globals.messages.errorInvalidIDs'?: string;
        'globals.messages.errorUUID'?: string;
        'globals.messages.errorUpdating'?: string;
        'globals.messages.internalError'?: string;
        'globals.messages.invalidData'?: string;
        'globals.messages.invalidID'?: string;
        'globals.messages.invalidUUID'?: string;
        'globals.messages.missingFields'?: string;
        'globals.messages.notFound'?: string;
        'globals.messages.passwordChange'?: string;
        'globals.messages.updated'?: string;
        'globals.months.1'?: string;
        'globals.months.10'?: string;
        'globals.months.11'?: string;
        'globals.months.12'?: string;
        'globals.months.2'?: string;
        'globals.months.3'?: string;
        'globals.months.4'?: string;
        'globals.months.5'?: string;
        'globals.months.6'?: string;
        'globals.months.7'?: string;
        'globals.months.8'?: string;
        'globals.months.9'?: string;
        'globals.states.off'?: string;
        'globals.terms.all'?: string;
        'globals.terms.analytics'?: string;
        'globals.terms.bounce'?: string;
        'globals.terms.bounces'?: string;
        'globals.terms.campaign'?: string;
        'globals.terms.campaigns'?: string;
        'globals.terms.dashboard'?: string;
        'globals.terms.day'?: string;
        'globals.terms.hour'?: string;
        'globals.terms.list'?: string;
        'globals.terms.lists'?: string;
        'globals.terms.media'?: string;
        'globals.terms.messenger'?: string;
        'globals.terms.messengers'?: string;
        'globals.terms.minute'?: string;
        'globals.terms.month'?: string;
        'globals.terms.second'?: string;
        'globals.terms.settings'?: string;
        'globals.terms.subscriber'?: string;
        'globals.terms.subscribers'?: string;
        'globals.terms.subscriptions'?: string;
        'globals.terms.tag'?: string;
        'globals.terms.tags'?: string;
        'globals.terms.template'?: string;
        'globals.terms.templates'?: string;
        'globals.terms.tx'?: string;
        'globals.terms.year'?: string;
        'import.alreadyRunning'?: string;
        'import.blocklist'?: string;
        'import.csvDelim'?: string;
        'import.csvDelimHelp'?: string;
        'import.csvExample'?: string;
        'import.csvFile'?: string;
        'import.csvFileHelp'?: string;
        'import.errorCopyingFile'?: string;
        'import.errorProcessingZIP'?: string;
        'import.errorStarting'?: string;
        'import.importDone'?: string;
        'import.importStarted'?: string;
        'import.instructions'?: string;
        'import.instructionsHelp'?: string;
        'import.invalidDelim'?: string;
        'import.invalidFile'?: string;
        'import.invalidMode'?: string;
        'import.invalidParams'?: string;
        'import.invalidSubStatus'?: string;
        'import.listSubHelp'?: string;
        'import.mode'?: string;
        'import.overwrite'?: string;
        'import.overwriteHelp'?: string;
        'import.recordsCount'?: string;
        'import.stopImport'?: string;
        'import.subscribe'?: string;
        'import.subscribeWarning'?: string;
        'import.title'?: string;
        'import.upload'?: string;
        'lists.confirmDelete'?: string;
        'lists.confirmSub'?: string;
        'lists.invalidName'?: string;
        'lists.newList'?: string;
        'lists.optin'?: string;
        'lists.optinHelp'?: string;
        'lists.optinTo'?: string;
        'lists.optins.double'?: string;
        'lists.optins.single'?: string;
        'lists.sendCampaign'?: string;
        'lists.sendOptinCampaign'?: string;
        'lists.type'?: string;
        'lists.typeHelp'?: string;
        'lists.types.private'?: string;
        'lists.types.public'?: string;
        'logs.title'?: string;
        'maintenance.help'?: string;
        'maintenance.maintenance.unconfirmedOptins'?: string;
        'maintenance.olderThan'?: string;
        'maintenance.title'?: string;
        'maintenance.unconfirmedSubs'?: string;
        'media.errorReadingFile'?: string;
        'media.errorResizing'?: string;
        'media.errorSavingThumbnail'?: string;
        'media.errorUploading'?: string;
        'media.invalidFile'?: string;
        'media.title'?: string;
        'media.unsupportedFileType'?: string;
        'media.upload'?: string;
        'media.uploadHelp'?: string;
        'media.uploadImage'?: string;
        'menu.allCampaigns'?: string;
        'menu.allLists'?: string;
        'menu.allSubscribers'?: string;
        'menu.dashboard'?: string;
        'menu.forms'?: string;
        'menu.import'?: string;
        'menu.logs'?: string;
        'menu.maintenance'?: string;
        'menu.media'?: string;
        'menu.newCampaign'?: string;
        'menu.settings'?: string;
        'public.archiveEmpty'?: string;
        'public.archiveTitle'?: string;
        'public.blocklisted'?: string;
        'public.campaignNotFound'?: string;
        'public.confirmOptinSubTitle'?: string;
        'public.confirmSub'?: string;
        'public.confirmSubInfo'?: string;
        'public.confirmSubTitle'?: string;
        'public.dataRemoved'?: string;
        'public.dataRemovedTitle'?: string;
        'public.dataSent'?: string;
        'public.dataSentTitle'?: string;
        'public.errorFetchingCampaign'?: string;
        'public.errorFetchingEmail'?: string;
        'public.errorFetchingLists'?: string;
        'public.errorProcessingRequest'?: string;
        'public.errorTitle'?: string;
        'public.invalidFeature'?: string;
        'public.invalidLink'?: string;
        'public.managePrefs'?: string;
        'public.managePrefsUnsub'?: string;
        'public.noListsAvailable'?: string;
        'public.noListsSelected'?: string;
        'public.noSubInfo'?: string;
        'public.noSubTitle'?: string;
        'public.notFoundTitle'?: string;
        'public.prefsSaved'?: string;
        'public.privacyConfirmWipe'?: string;
        'public.privacyExport'?: string;
        'public.privacyExportHelp'?: string;
        'public.privacyTitle'?: string;
        'public.privacyWipe'?: string;
        'public.privacyWipeHelp'?: string;
        'public.sub'?: string;
        'public.subConfirmed'?: string;
        'public.subConfirmedTitle'?: string;
        'public.subName'?: string;
        'public.subNotFound'?: string;
        'public.subOptinPending'?: string;
        'public.subPrivateList'?: string;
        'public.subTitle'?: string;
        'public.unsub'?: string;
        'public.unsubFull'?: string;
        'public.unsubHelp'?: string;
        'public.unsubTitle'?: string;
        'public.unsubbedInfo'?: string;
        'public.unsubbedTitle'?: string;
        'public.unsubscribeTitle'?: string;
        'settings.appearance.adminHelp'?: string;
        'settings.appearance.adminName'?: string;
        'settings.appearance.customCSS'?: string;
        'settings.appearance.customJS'?: string;
        'settings.appearance.name'?: string;
        'settings.appearance.publicHelp'?: string;
        'settings.appearance.publicName'?: string;
        'settings.bounces.action'?: string;
        'settings.bounces.blocklist'?: string;
        'settings.bounces.count'?: string;
        'settings.bounces.countHelp'?: string;
        'settings.bounces.delete'?: string;
        'settings.bounces.enable'?: string;
        'settings.bounces.enableMailbox'?: string;
        'settings.bounces.enableSES'?: string;
        'settings.bounces.enableSendgrid'?: string;
        'settings.bounces.enableForwardemail'?: string;
        'settings.bounces.enablePostmark'?: string;
        'settings.bounces.enableWebhooks'?: string;
        'settings.bounces.enabled'?: string;
        'settings.bounces.folder'?: string;
        'settings.bounces.folderHelp'?: string;
        'settings.bounces.invalidScanInterval'?: string;
        'settings.bounces.name'?: string;
        'settings.bounces.scanInterval'?: string;
        'settings.bounces.scanIntervalHelp'?: string;
        'settings.bounces.sendgridKey'?: string;
        'settings.bounces.forwardemailKey'?: string;
        'settings.bounces.postmarkUsername'?: string;
        'settings.bounces.postmarkUsernameHelp'?: string;
        'settings.bounces.postmarkPassword'?: string;
        'settings.bounces.type'?: string;
        'settings.bounces.username'?: string;
        'settings.confirmRestart'?: string;
        'settings.duplicateMessengerName'?: string;
        'settings.errorEncoding'?: string;
        'settings.errorNoSMTP'?: string;
        'settings.general.adminNotifEmails'?: string;
        'settings.general.adminNotifEmailsHelp'?: string;
        'settings.general.checkUpdates'?: string;
        'settings.general.checkUpdatesHelp'?: string;
        'settings.general.enablePublicArchive'?: string;
        'settings.general.enablePublicArchiveHelp'?: string;
        'settings.general.enablePublicSubPage'?: string;
        'settings.general.enablePublicSubPageHelp'?: string;
        'settings.general.faviconURL'?: string;
        'settings.general.faviconURLHelp'?: string;
        'settings.general.fromEmail'?: string;
        'settings.general.fromEmailHelp'?: string;
        'settings.general.language'?: string;
        'settings.general.logoURL'?: string;
        'settings.general.logoURLHelp'?: string;
        'settings.general.name'?: string;
        'settings.general.rootURL'?: string;
        'settings.general.rootURLHelp'?: string;
        'settings.general.sendOptinConfirm'?: string;
        'settings.general.sendOptinConfirmHelp'?: string;
        'settings.general.siteName'?: string;
        'settings.invalidMessengerName'?: string;
        'settings.mailserver.authProtocol'?: string;
        'settings.mailserver.name'?: string;
        'settings.mailserver.nameHelp'?: string;
        'settings.mailserver.host'?: string;
        'settings.mailserver.hostHelp'?: string;
        'settings.mailserver.idleTimeout'?: string;
        'settings.mailserver.idleTimeoutHelp'?: string;
        'settings.mailserver.maxConns'?: string;
        'settings.mailserver.maxConnsHelp'?: string;
        'settings.mailserver.password'?: string;
        'settings.mailserver.passwordHelp'?: string;
        'settings.mailserver.port'?: string;
        'settings.mailserver.portHelp'?: string;
        'settings.mailserver.skipTLS'?: string;
        'settings.mailserver.skipTLSHelp'?: string;
        'settings.mailserver.tls'?: string;
        'settings.mailserver.tlsHelp'?: string;
        'settings.mailserver.username'?: string;
        'settings.mailserver.waitTimeout'?: string;
        'settings.mailserver.waitTimeoutHelp'?: string;
        'settings.media.provider'?: string;
        'settings.media.s3.bucket'?: string;
        'settings.media.s3.bucketPath'?: string;
        'settings.media.s3.bucketPathHelp'?: string;
        'settings.media.s3.bucketType'?: string;
        'settings.media.s3.bucketTypePrivate'?: string;
        'settings.media.s3.bucketTypePublic'?: string;
        'settings.media.s3.key'?: string;
        'settings.media.s3.publicURL'?: string;
        'settings.media.s3.publicURLHelp'?: string;
        'settings.media.s3.region'?: string;
        'settings.media.s3.secret'?: string;
        'settings.media.s3.uploadExpiry'?: string;
        'settings.media.s3.uploadExpiryHelp'?: string;
        'settings.media.s3.url'?: string;
        'settings.media.s3.urlHelp'?: string;
        'settings.media.title'?: string;
        'settings.media.upload.path'?: string;
        'settings.media.upload.pathHelp'?: string;
        'settings.media.upload.uri'?: string;
        'settings.media.upload.uriHelp'?: string;
        'settings.messengers.maxConns'?: string;
        'settings.messengers.maxConnsHelp'?: string;
        'settings.messengers.messageSaved'?: string;
        'settings.messengers.name'?: string;
        'settings.messengers.nameHelp'?: string;
        'settings.messengers.password'?: string;
        'settings.messengers.retries'?: string;
        'settings.messengers.retriesHelp'?: string;
        'settings.messengers.skipTLSHelp'?: string;
        'settings.messengers.timeout'?: string;
        'settings.messengers.timeoutHelp'?: string;
        'settings.messengers.url'?: string;
        'settings.messengers.urlHelp'?: string;
        'settings.messengers.username'?: string;
        'settings.needsRestart'?: string;
        'settings.performance.batchSize'?: string;
        'settings.performance.batchSizeHelp'?: string;
        'settings.performance.concurrency'?: string;
        'settings.performance.concurrencyHelp'?: string;
        'settings.performance.maxErrThreshold'?: string;
        'settings.performance.maxErrThresholdHelp'?: string;
        'settings.performance.messageRate'?: string;
        'settings.performance.messageRateHelp'?: string;
        'settings.performance.name'?: string;
        'settings.performance.slidingWindow'?: string;
        'settings.performance.slidingWindowDuration'?: string;
        'settings.performance.slidingWindowDurationHelp'?: string;
        'settings.performance.slidingWindowHelp'?: string;
        'settings.performance.slidingWindowRate'?: string;
        'settings.performance.slidingWindowRateHelp'?: string;
        'settings.privacy.allowBlocklist'?: string;
        'settings.privacy.allowBlocklistHelp'?: string;
        'settings.privacy.allowExport'?: string;
        'settings.privacy.allowExportHelp'?: string;
        'settings.privacy.allowPrefs'?: string;
        'settings.privacy.allowPrefsHelp'?: string;
        'settings.privacy.allowWipe'?: string;
        'settings.privacy.allowWipeHelp'?: string;
        'settings.privacy.domainBlocklist'?: string;
        'settings.privacy.domainBlocklistHelp'?: string;
        'settings.privacy.individualSubTracking'?: string;
        'settings.privacy.individualSubTrackingHelp'?: string;
        'settings.privacy.listUnsubHeader'?: string;
        'settings.privacy.listUnsubHeaderHelp'?: string;
        'settings.privacy.name'?: string;
        'settings.restart'?: string;
        'settings.smtp.customHeaders'?: string;
        'settings.smtp.customHeadersHelp'?: string;
        'settings.smtp.enabled'?: string;
        'settings.smtp.heloHost'?: string;
        'settings.smtp.heloHostHelp'?: string;
        'settings.smtp.name'?: string;
        'settings.smtp.retries'?: string;
        'settings.smtp.retriesHelp'?: string;
        'settings.smtp.sendTest'?: string;
        'settings.smtp.setCustomHeaders'?: string;
        'settings.smtp.testConnection'?: string;
        'settings.smtp.testEnterEmail'?: string;
        'settings.smtp.toEmail'?: string;
        'settings.title'?: string;
        'settings.updateAvailable'?: string;
        'subscribers.advancedQuery'?: string;
        'subscribers.advancedQueryHelp'?: string;
        'subscribers.attribs'?: string;
        'subscribers.attribsHelp'?: string;
        'subscribers.blocklistedHelp'?: string;
        'subscribers.confirmBlocklist'?: string;
        'subscribers.confirmDelete'?: string;
        'subscribers.confirmExport'?: string;
        'subscribers.domainBlocklisted'?: string;
        'subscribers.downloadData'?: string;
        'subscribers.email'?: string;
        'subscribers.emailExists'?: string;
        'subscribers.errorBlocklisting'?: string;
        'subscribers.errorNoIDs'?: string;
        'subscribers.errorNoListsGiven'?: string;
        'subscribers.errorPreparingQuery'?: string;
        'subscribers.errorSendingOptin'?: string;
        'subscribers.export'?: string;
        'subscribers.invalidAction'?: string;
        'subscribers.invalidEmail'?: string;
        'subscribers.invalidJSON'?: string;
        'subscribers.invalidName'?: string;
        'subscribers.listChangeApplied'?: string;
        'subscribers.lists'?: string;
        'subscribers.listsHelp'?: string;
        'subscribers.listsPlaceholder'?: string;
        'subscribers.manageLists'?: string;
        'subscribers.markUnsubscribed'?: string;
        'subscribers.newSubscriber'?: string;
        'subscribers.numSelected'?: string;
        'subscribers.optinSubject'?: string;
        'subscribers.preconfirm'?: string;
        'subscribers.preconfirmHelp'?: string;
        'subscribers.query'?: string;
        'subscribers.queryPlaceholder'?: string;
        'subscribers.reset'?: string;
        'subscribers.selectAll'?: string;
        'subscribers.sendOptinConfirm'?: string;
        'subscribers.sentOptinConfirm'?: string;
        'subscribers.status.blocklisted'?: string;
        'subscribers.status.confirmed'?: string;
        'subscribers.status.enabled'?: string;
        'subscribers.status.subscribed'?: string;
        'subscribers.status.unconfirmed'?: string;
        'subscribers.status.unsubscribed'?: string;
        'subscribers.subscribersDeleted'?: string;
        'templates.cantDeleteDefault'?: string;
        'templates.default'?: string;
        'templates.dummyName'?: string;
        'templates.dummySubject'?: string;
        'templates.errorCompiling'?: string;
        'templates.errorRendering'?: string;
        'templates.fieldInvalidName'?: string;
        'templates.makeDefault'?: string;
        'templates.newTemplate'?: string;
        'templates.placeholderHelp'?: string;
        'templates.preview'?: string;
        'templates.rawHTML'?: string;
        'templates.subject'?: string;
        'users.login'?: string;
        'users.logout'?: string;
    };
};

export type ServerConfig = {
    data?: {
        messengers?: Array<string>;
        langs?: Array<{
            code?: string;
            name?: string;
        }>;
        lang?: string;
        update?: string;
        needs_restart?: boolean;
        version?: string;
    };
};

export type DashboardChart = {
    link_clicks?: Array<{
        count?: number;
        date?: string;
    }>;
    campaign_views?: Array<{
        count?: number;
        date?: string;
    }>;
};

export type DashboardCount = {
    data?: {
        subscribers?: {
            total?: number;
            blocklisted?: {
                [key: string]: unknown;
            };
            orphans?: number;
        };
        lists?: {
            total?: number;
            private?: number;
            public?: number;
            optin_single?: number;
            optin_double?: number;
        };
        campaigns?: {
            total?: number;
            by_status?: {
                draft?: number;
            };
        };
        messages?: number;
    };
};

export type SmtpSettings = {
    uuid?: string;
    enabled?: boolean;
    host?: string;
    hello_hostname?: string;
    port?: number;
    auth_protocol?: string;
    username?: string;
    email_headers?: Array<{
        [key: string]: unknown;
    }>;
    max_conns?: number;
    max_msg_retries?: number;
    idle_timeout?: string;
    wait_timeout?: string;
    tls_type?: string;
    tls_skip_verify?: boolean;
};

export type SmtpTest = {
    uuid?: string;
    enabled?: boolean;
    host?: string;
    hello_hostname?: string;
    port?: number;
    auth_protocol?: string;
    username?: string;
    email_headers?: Array<{
        [key: string]: unknown;
    }>;
    max_conns?: number;
    max_msg_retries?: number;
    idle_timeout?: string;
    wait_timeout?: string;
    tls_type?: string;
    tls_skip_verify?: boolean;
    strEmailHeaders?: string;
    password?: string;
    email?: string;
};

export type MailBoxBounces = {
    uuid?: string;
    enabled?: boolean;
    type?: string;
    host?: string;
    port?: number;
    auth_protocol?: string;
    return_path?: string;
    username?: string;
    tls_enabled?: boolean;
    tls_skip_verify?: boolean;
    scan_interval?: string;
};

export type Settings = {
    'app.site_name'?: string;
    'app.root_url'?: string;
    'app.logo_url'?: string;
    'app.favicon_url'?: string;
    'app.from_email'?: string;
    'app.notify_emails'?: Array<string>;
    'app.enable_public_subscription_page'?: boolean;
    'app.enable_public_archive'?: boolean;
    'app.send_optin_confirmation'?: boolean;
    'app.check_updates'?: boolean;
    'app.lang'?: string;
    'app.batch_size'?: number;
    'app.concurrency'?: number;
    'app.max_send_errors'?: number;
    'app.message_rate'?: number;
    'app.message_sliding_window'?: boolean;
    'app.message_sliding_window_duration'?: string;
    'app.message_sliding_window_rate'?: number;
    'privacy.individual_tracking'?: boolean;
    'privacy.unsubscribe_header'?: boolean;
    'privacy.allow_blocklist'?: boolean;
    'privacy.allow_preferences'?: boolean;
    'privacy.allow_export'?: boolean;
    'privacy.allow_wipe'?: boolean;
    'privacy.exportable'?: Array<string>;
    'privacy.domain_blocklist'?: Array<{
        [key: string]: unknown;
    }>;
    'upload.provider'?: string;
    'upload.filesystem.upload_path'?: string;
    'upload.filesystem.upload_uri'?: string;
    'upload.s3.url'?: string;
    'upload.s3.public_url'?: string;
    'upload.s3.aws_access_key_id'?: string;
    'upload.s3.aws_default_region'?: string;
    'upload.s3.bucket'?: string;
    'upload.s3.bucket_domain'?: string;
    'upload.s3.bucket_path'?: string;
    'upload.s3.bucket_type'?: string;
    'upload.s3.expiry'?: string;
    smtp?: Array<SmtpSettings>;
    messengers?: Array<{
        [key: string]: unknown;
    }>;
    'bounce.enabled'?: boolean;
    'bounce.webhooks_enabled'?: boolean;
    'bounce.count'?: number;
    'bounce.action'?: string;
    'bounce.ses_enabled'?: boolean;
    'bounce.sendgrid_enabled'?: boolean;
    'bounce.sendgrid_key'?: string;
    'bounce.forwardemail_enabled'?: boolean;
    'bounce.forwardemail_key'?: string;
    'bounce.postmark_enabled'?: boolean;
    'bounce.postmark_username'?: string;
    'bounce.postmark_password'?: string;
    'bounce.mailboxes'?: Array<MailBoxBounces>;
    'appearance.admin.custom_css'?: string;
    'appearance.admin.custom_js'?: string;
    'appearance.public.custom_css'?: string;
    'appearance.public.custom_js'?: string;
};

export type SubscriberProfile = {
    id?: number;
    uuid?: string;
    email?: string;
    name?: string;
    attribs?: {
        [key: string]: unknown;
    };
    status?: string;
    created_at?: string;
    updated_at?: string;
};

export type Subscriptions = {
    subscription_status?: string;
    name?: string;
    type?: string;
    created_at?: string;
};

export type SubscriberData = {
    email?: string;
    profile?: Array<SubscriberProfile>;
    subscriptions?: Array<Subscriptions>;
    campaign_views?: Array<{
        [key: string]: unknown;
    }>;
    link_clicks?: Array<{
        [key: string]: unknown;
    }>;
};

export type Subscriber = {
    id?: number;
    created_at?: string;
    updated_at?: string;
    uuid?: string;
    email?: string;
    name?: string;
    attribs?: {
        [key: string]: unknown;
    };
    status?: string;
    lists?: Array<{
        subscription_status?: string;
        id?: number;
        uuid?: string;
        name?: string;
        type?: string;
        tags?: Array<string>;
        created_at?: string;
        updated_at?: string;
    }>;
};

export type NewSubscriber = {
    email?: string;
    name?: string;
    status?: string;
    lists?: Array<number>;
    list_uuids?: Array<string>;
    preconfirm_subscriptions?: boolean;
    attribs?: {
        [key: string]: unknown;
    };
};

export type UpdateSubscriber = {
    email?: string;
    name?: string;
    status?: string;
    lists?: Array<number>;
    list_uuids?: Array<string>;
    preconfirm_subscriptions?: boolean;
    attribs?: {
        [key: string]: unknown;
    };
};

export type SubscriberQueryRequest = {
    query?: string;
    /**
     * The ids of the subscribers to be modified.
     */
    ids?: Array<number>;
    /**
     * Whether to add, remove, or unsubscribe the users.
     */
    action?: 'add' | 'remove' | 'unsubscribe';
    /**
     * The ids of the lists to be modified.
     */
    target_list_ids?: number;
    /**
     * confirmed, unconfirmed, or unsubscribed status.
     */
    status?: 'confirmed' | 'unconfirmed' | 'unsubscribed';
};

export type Bounce = {
    results?: Array<{
        id?: number;
        type?: string;
        source?: string;
        meta?: {
            [key: string]: unknown;
        };
        created_at?: string;
        email?: string;
        subscriber_uuid?: string;
        subscriber_id?: number;
        campaign?: {
            id?: number;
            name?: string;
        };
        campaign_uuid?: string;
        total?: number;
    }>;
};

export type List = {
    id?: number;
    created_at?: string;
    updated_at?: string;
    uuid?: string;
    name?: string;
    type?: string;
    optin?: string;
    tags?: Array<string>;
    subscriber_count?: number;
    description?: string;
};

export type NewList = {
    name?: string;
    type?: 'public' | 'private';
    optin?: 'single' | 'double';
    tags?: Array<string>;
    description?: string;
};

export type ImportStatus = {
    data?: {
        name?: string;
        total?: number;
        imported?: number;
        status?: string;
    };
};

export type Campaign = {
    id?: number;
    created_at?: string;
    updated_at?: string;
    CampaignID?: number;
    views?: number;
    clicks?: number;
    lists?: Array<{
        id?: number;
        name?: string;
    }>;
    started_at?: string;
    to_send?: number;
    sent?: number;
    uuid?: string;
    type?: 'regular' | 'optin';
    name?: string;
    subject?: string;
    from_email?: string;
    body?: string;
    send_at?: string;
    status?: string;
    content_type?: 'richtext' | 'html' | 'markdown' | 'plain';
    tags?: Array<string>;
    template_id?: number;
    messenger?: string;
};

export type CampaignContentRequest = {
    id?: number;
    created_at?: string;
    updated_at?: string;
    CampaignID?: number;
    views?: number;
    clicks?: number;
    lists?: Array<{
        id?: number;
        name?: string;
    }>;
    started_at?: string;
    to_send?: number;
    sent?: number;
    uuid?: string;
    type?: 'regular' | 'optin';
    name?: string;
    subject?: string;
    from_email?: string;
    body?: string;
    send_at?: string;
    status?: string;
    content_type?: 'richtext' | 'html' | 'markdown' | 'plain';
    tags?: Array<string>;
    template_id?: number;
    messenger?: string;
    from?: string;
    to?: string;
};

export type CampaignRequest = {
    name?: string;
    subject?: string;
    lists?: Array<number>;
    from_email?: string;
    content_type?: string;
    messenger?: string;
    type?: string;
    tags?: Array<string>;
    send_later?: boolean;
    send_at?: {
        headers?: Array<{
            [key: string]: unknown;
        }>;
        template_id?: number;
    };
};

export type CampaignUpdate = {
    name?: string;
    subject?: string;
    lists?: Array<number>;
    from_email?: string;
    messenger?: string;
    type?: string;
    tags?: Array<string>;
    send_later?: boolean;
    send_at?: {
        [key: string]: unknown;
    };
    headers?: Array<{
        [key: string]: unknown;
    }>;
    template_id?: number;
    content_type?: string;
    body?: string;
    altbody?: string;
    archive?: boolean;
    archive_template_id?: number;
    archive_meta?: {
        [key: string]: unknown;
    };
};

export type CampaignStats = {
    id?: number;
    status?: string;
    to_send?: number;
    sent?: number;
    started_at?: string;
    updated_at?: string;
    rate?: number;
    net_rate?: number;
};

export type CampaignAnalyticsCount = {
    campaign_id?: number;
    count?: number;
    timestamp?: string;
};

export type MediaFileObject = {
    id?: number;
    uuid?: string;
    filename?: string;
    created_at?: string;
    thumb_url?: string;
    uri?: string;
};

export type Template = {
    id?: number;
    created_at?: string;
    updated_at?: string;
    name?: string;
    body?: string;
    type?: string;
    is_default?: boolean;
};

export type TransactionalMessage = {
    subscriber_email?: string;
    subscriber_id?: number;
    template_id?: number;
    from_email?: string;
    data?: {
        [key: string]: unknown;
    };
    headers?: Array<{
        [key: string]: unknown;
    }>;
    messenger?: string;
    content_type?: string;
};

export type GetHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthCheckResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type GetHealthCheckResponse = GetHealthCheckResponses[keyof GetHealthCheckResponses];

export type GetServerConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/config';
};

export type GetServerConfigResponses = {
    /**
     * A server config object
     */
    200: {
        data?: ServerConfig;
    };
};

export type GetServerConfigResponse = GetServerConfigResponses[keyof GetServerConfigResponses];

export type GetI18nLangData = {
    body?: never;
    path: {
        /**
         * JSON language pack required
         */
        lang: string;
    };
    query?: never;
    url: '/lang/{lang}';
};

export type GetI18nLangResponses = {
    /**
     * requested language pack
     */
    200: {
        data?: LanguagePack;
    };
};

export type GetI18nLangResponse = GetI18nLangResponses[keyof GetI18nLangResponses];

export type GetDashboardChartsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dashboard/charts';
};

export type GetDashboardChartsResponses = {
    /**
     * chart data points
     */
    200: {
        data?: DashboardChart;
    };
};

export type GetDashboardChartsResponse = GetDashboardChartsResponses[keyof GetDashboardChartsResponses];

export type GetDashboardCountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dashboard/counts';
};

export type GetDashboardCountsResponses = {
    /**
     * stat counts
     */
    200: {
        data?: DashboardCount;
    };
};

export type GetDashboardCountsResponse = GetDashboardCountsResponses[keyof GetDashboardCountsResponses];

export type GetSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings';
};

export type GetSettingsResponses = {
    /**
     * settings object
     */
    200: {
        data?: Settings;
    };
};

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses];

export type UpdateSettingsData = {
    /**
     * updated settings field values
     */
    body?: Settings;
    path?: never;
    query?: never;
    url: '/settings';
};

export type UpdateSettingsResponses = {
    /**
     * updated settings object
     */
    200: {
        data?: boolean;
    };
};

export type UpdateSettingsResponse = UpdateSettingsResponses[keyof UpdateSettingsResponses];

export type TestSmtpSettingsData = {
    /**
     * updated SMTP settings field values
     */
    body?: SmtpTest;
    path?: never;
    query?: never;
    url: '/settings/smtp/test';
};

export type TestSmtpSettingsResponses = {
    /**
     * updated SMTP test settings
     */
    200: {
        data?: boolean;
    };
};

export type TestSmtpSettingsResponse = TestSmtpSettingsResponses[keyof TestSmtpSettingsResponses];

export type ReloadAppData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/reload';
};

export type ReloadAppResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type ReloadAppResponse = ReloadAppResponses[keyof ReloadAppResponses];

export type GetLogsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/logs';
};

export type GetLogsResponses = {
    /**
     * stored log entries
     */
    200: {
        data?: Array<string>;
    };
};

export type GetLogsResponse = GetLogsResponses[keyof GetLogsResponses];

export type DeleteSubscriberByListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * subscriber id/s to be deleted
         */
        id: string;
    };
    url: '/subscribers';
};

export type DeleteSubscriberByListResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteSubscriberByListResponse = DeleteSubscriberByListResponses[keyof DeleteSubscriberByListResponses];

export type GetSubscribersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number for paginated results.
         */
        page?: number;
        /**
         * Number of items per page. Use an integer for specific page size or 'all' to retrieve all results
         */
        per_page?: number | 'all';
        /**
         * query subscribers with an SQL expression.
         */
        query?: string;
        /**
         * Result sorting field. Options are name, status, created_at, updated_at
         */
        order_by?: 'name' | 'status' | 'created_at' | 'updated_at';
        /**
         * ASC|DESC Sort by ascending or descending order.
         */
        order?: 'ASC' | 'DESC';
        /**
         * Subscription status to filter by if there are one or more list_ids.
         */
        subscription_status?: string;
        /**
         * ID of lists to filter by. Repeat in the query for multiple values.
         */
        list_id?: Array<number>;
    };
    url: '/subscribers';
};

export type GetSubscribersResponses = {
    /**
     * subscribers list
     */
    200: {
        data?: {
            results?: Array<Subscriber>;
            query?: string;
            total?: number;
            per_page?: number;
            page?: number;
        };
    };
};

export type GetSubscribersResponse = GetSubscribersResponses[keyof GetSubscribersResponses];

export type CreateSubscriberData = {
    /**
     * new subscriber info
     */
    body?: NewSubscriber;
    path?: never;
    query?: never;
    url: '/subscribers';
};

export type CreateSubscriberResponses = {
    /**
     * subscriber object
     */
    200: {
        data?: Subscriber;
    };
};

export type CreateSubscriberResponse = CreateSubscriberResponses[keyof CreateSubscriberResponses];

export type DeleteSubscriberByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the subscriber you want to get.
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}';
};

export type DeleteSubscriberByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteSubscriberByIdResponse = DeleteSubscriberByIdResponses[keyof DeleteSubscriberByIdResponses];

export type GetSubscriberByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the subscriber you want to get.
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}';
};

export type GetSubscriberByIdResponses = {
    /**
     * gets a single subscriber.
     */
    200: {
        data?: Subscriber;
    };
};

export type GetSubscriberByIdResponse = GetSubscriberByIdResponses[keyof GetSubscriberByIdResponses];

export type UpdateSubscriberByIdData = {
    /**
     * new subscriber info
     */
    body?: UpdateSubscriber;
    path: {
        /**
         * The id of subscriber to update
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}';
};

export type UpdateSubscriberByIdResponses = {
    /**
     * returns updated subscriber.
     */
    200: {
        data?: Subscriber;
    };
};

export type UpdateSubscriberByIdResponse = UpdateSubscriberByIdResponses[keyof UpdateSubscriberByIdResponses];

export type ManageSubscriberListsData = {
    /**
     * The list of subscribers details to add or remove
     */
    body?: SubscriberQueryRequest;
    path?: never;
    query?: never;
    url: '/subscribers/lists';
};

export type ManageSubscriberListsResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type ManageSubscriberListsResponse = ManageSubscriberListsResponses[keyof ManageSubscriberListsResponses];

export type ManageSubscriberListByIdData = {
    /**
     * The list of subscribers to add or remove
     */
    body?: SubscriberQueryRequest;
    path: {
        /**
         * The id of list you want to update
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/lists/{id}';
};

export type ManageSubscriberListByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type ManageSubscriberListByIdResponse = ManageSubscriberListByIdResponses[keyof ManageSubscriberListByIdResponses];

export type ManageBlocklistBySubscriberListData = {
    /**
     * The list of subscribers to blocklist
     */
    body?: SubscriberQueryRequest;
    path?: never;
    query?: never;
    url: '/subscribers/blocklist';
};

export type ManageBlocklistBySubscriberListResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type ManageBlocklistBySubscriberListResponse = ManageBlocklistBySubscriberListResponses[keyof ManageBlocklistBySubscriberListResponses];

export type ManageBlocklistSubscribersByIdData = {
    /**
     * The id of subscriber to add or remove
     */
    body?: SubscriberQueryRequest;
    path: {
        /**
         * The id value of the subscriber you want to blocklist.
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}/blocklist';
};

export type ManageBlocklistSubscribersByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type ManageBlocklistSubscribersByIdResponse = ManageBlocklistSubscribersByIdResponses[keyof ManageBlocklistSubscribersByIdResponses];

export type ExportSubscriberDataByIdData = {
    body?: never;
    path: {
        /**
         * The id value of subscriber profile you want to export
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}/export';
};

export type ExportSubscriberDataByIdResponses = {
    /**
     * subscriber data object
     */
    200: SubscriberData;
};

export type ExportSubscriberDataByIdResponse = ExportSubscriberDataByIdResponses[keyof ExportSubscriberDataByIdResponses];

export type DeleteSubscriberBouncesByIdData = {
    body?: never;
    path: {
        /**
         * subscriber id
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}/bounces';
};

export type DeleteSubscriberBouncesByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteSubscriberBouncesByIdResponse = DeleteSubscriberBouncesByIdResponses[keyof DeleteSubscriberBouncesByIdResponses];

export type GetSubscriberBouncesByIdData = {
    body?: never;
    path: {
        /**
         * subscriber id
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}/bounces';
};

export type GetSubscriberBouncesByIdResponses = {
    /**
     * list of bounce records of a subscriber
     */
    200: {
        data?: Array<Bounce>;
    };
};

export type GetSubscriberBouncesByIdResponse = GetSubscriberBouncesByIdResponses[keyof GetSubscriberBouncesByIdResponses];

export type SubscriberSendOptinByIdData = {
    body?: never;
    path: {
        /**
         * sends an optin confirmation e-mail to a subscriber
         */
        id: number;
    };
    query?: never;
    url: '/subscribers/{id}/optin';
};

export type SubscriberSendOptinByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type SubscriberSendOptinByIdResponse = SubscriberSendOptinByIdResponses[keyof SubscriberSendOptinByIdResponses];

export type DeleteSubscriberByQueryData = {
    /**
     * Arbitrary SQL expression.
     */
    body?: SubscriberQueryRequest;
    path?: never;
    query?: never;
    url: '/subscribers/query/delete';
};

export type DeleteSubscriberByQueryResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteSubscriberByQueryResponse = DeleteSubscriberByQueryResponses[keyof DeleteSubscriberByQueryResponses];

export type BlocklistSubscribersQueryData = {
    /**
     * Arbitrary SQL expression.
     */
    body?: SubscriberQueryRequest;
    path?: never;
    query?: never;
    url: '/subscribers/query/blocklist';
};

export type BlocklistSubscribersQueryResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type BlocklistSubscribersQueryResponse = BlocklistSubscribersQueryResponses[keyof BlocklistSubscribersQueryResponses];

export type ManageSubscriberListsByQueryData = {
    /**
     * Arbitrary SQL expression.
     */
    body?: SubscriberQueryRequest;
    path?: never;
    query?: never;
    url: '/subscribers/query/lists';
};

export type ManageSubscriberListsByQueryResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type ManageSubscriberListsByQueryResponse = ManageSubscriberListsByQueryResponses[keyof ManageSubscriberListsByQueryResponses];

export type DeleteBouncesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * flag for multiple bounce record deletion
         */
        all?: boolean;
        /**
         * list of bounce ids to delete
         */
        id?: string;
    };
    url: '/bounces';
};

export type DeleteBouncesResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteBouncesResponse = DeleteBouncesResponses[keyof DeleteBouncesResponses];

export type GetBouncesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Numeric identifier for retrieving bounce records associated with a specific campaign
         */
        campaign_id?: number;
        /**
         * Page number for paginated results. Start from 1 for the first page
         */
        page?: number;
        /**
         * Number of items per page. Use an integer for specific page size or 'all' to retrieve all results
         */
        per_page?: number | 'all';
        /**
         * Filter bounce records by their source of origin
         */
        source?: string;
        /**
         * Specifies the field by which to sort the bounce records. Available options are 'email', 'campaign_name', 'source', and 'created_at'
         */
        order_by?: 'email' | 'campaign_name' | 'source' | 'created_at';
        /**
         * Determines the sort order of results. Use 'asc' for ascending or 'desc' for descending order
         */
        order?: 'asc' | 'desc';
    };
    url: '/bounces';
};

export type GetBouncesResponses = {
    /**
     * list of bounce records
     */
    200: {
        data?: {
            results?: Array<Bounce>;
            query?: string;
            total?: number;
            per_page?: number;
            page?: number;
        };
    };
};

export type GetBouncesResponse = GetBouncesResponses[keyof GetBouncesResponses];

export type DeleteBounceByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the bounce you want to delete.
         */
        id: number;
    };
    query?: never;
    url: '/bounces/{id}';
};

export type DeleteBounceByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteBounceByIdResponse = DeleteBounceByIdResponses[keyof DeleteBounceByIdResponses];

export type GetBounceByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the bounce you want to retreive.
         */
        id: number;
    };
    query?: never;
    url: '/bounces/{id}';
};

export type GetBounceByIdResponses = {
    /**
     * bounce object
     */
    200: {
        data?: Bounce;
    };
};

export type GetBounceByIdResponse = GetBounceByIdResponses[keyof GetBounceByIdResponses];

export type GetListsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * total number of pages
         */
        page?: number;
        /**
         * number of items per page
         */
        per_page?: number | 'all';
        /**
         * Optional string to search a list by name.
         */
        query?: string;
        /**
         * Field to sort results by. name|status|created_at|updated_at
         */
        order_by?: 'name' | 'status' | 'created_at' | 'updated_at';
        /**
         * ASC|DESC Sort by ascending or descending order.
         */
        order?: 'ASC' | 'DESC';
        /**
         * When set to true, returns response without body content
         */
        minimal?: boolean;
        /**
         * Tags to filter lists. Repeat in the query for multiple values.
         */
        tag?: Array<string>;
    };
    url: '/lists';
};

export type GetListsResponses = {
    /**
     * list of metadata
     */
    200: {
        data?: {
            results?: Array<List>;
            total?: number;
            per_page?: number;
            page?: number;
        };
    };
};

export type GetListsResponse = GetListsResponses[keyof GetListsResponses];

export type CreateListData = {
    /**
     * new list info
     */
    body?: NewList;
    path?: never;
    query?: never;
    url: '/lists';
};

export type CreateListResponses = {
    /**
     * updated list object
     */
    200: {
        data?: List;
    };
};

export type CreateListResponse = CreateListResponses[keyof CreateListResponses];

export type DeleteListByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the lists you want to delete.
         */
        list_id: number;
    };
    query?: never;
    url: '/lists/{list_id}';
};

export type DeleteListByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteListByIdResponse = DeleteListByIdResponses[keyof DeleteListByIdResponses];

export type GetListByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the list you want to retreive.
         */
        list_id: number;
    };
    query?: never;
    url: '/lists/{list_id}';
};

export type GetListByIdResponses = {
    /**
     * list object
     */
    200: {
        data?: List;
    };
};

export type GetListByIdResponse = GetListByIdResponses[keyof GetListByIdResponses];

export type UpdateListByIdData = {
    /**
     * updated list field values
     */
    body?: List;
    path: {
        /**
         * The id value of the list you want to update
         */
        list_id: number;
    };
    query?: never;
    url: '/lists/{list_id}';
};

export type UpdateListByIdResponses = {
    /**
     * updated list object
     */
    200: {
        data?: List;
    };
};

export type UpdateListByIdResponse = UpdateListByIdResponses[keyof UpdateListByIdResponses];

export type StopImportSubscribersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/import/subscribers';
};

export type StopImportSubscribersResponses = {
    /**
     * response
     */
    200: {
        data?: ImportStatus;
    };
};

export type StopImportSubscribersResponse = StopImportSubscribersResponses[keyof StopImportSubscribersResponses];

export type GetImportSubscribersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/import/subscribers';
};

export type GetImportSubscribersResponses = {
    /**
     * import status
     */
    200: {
        data?: ImportStatus;
    };
};

export type GetImportSubscribersResponse = GetImportSubscribersResponses[keyof GetImportSubscribersResponses];

export type ImportSubscribersData = {
    /**
     * uploads and bulk imports of compressed CSV files
     */
    body?: {
        /**
         * JSON string containing import parameters for more detail https://listmonk.app/docs/apis/import/#params-json-string
         */
        params?: string;
        /**
         * File for upload.
         */
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/import/subscribers';
};

export type ImportSubscribersResponses = {
    /**
     * updated import status
     */
    200: {
        data?: ImportStatus;
    };
};

export type ImportSubscribersResponse = ImportSubscribersResponses[keyof ImportSubscribersResponses];

export type GetImportSubscriberStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/import/subscribers/logs';
};

export type GetImportSubscriberStatsResponses = {
    /**
     * import statistics
     */
    200: {
        data?: string;
    };
};

export type GetImportSubscriberStatsResponse = GetImportSubscriberStatsResponses[keyof GetImportSubscriberStatsResponses];

export type GetCampaignsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter campaigns by status. Multiple status values can be specified by repeating the parameter
         */
        status?: Array<'scheduled' | 'running' | 'paused' | 'cancelled'>;
        /**
         * When set to true, returns response without body content
         */
        no_body?: boolean;
        /**
         * Page number for paginated results.
         */
        page?: number;
        /**
         * Number of items per page. Use an integer for specific page size or 'all' to retrieve all results
         */
        per_page?: number | 'all';
        /**
         * Filter campaigns by tags. Multiple tags can be specified by repeating the parameter
         */
        tags?: Array<string>;
        /**
         * Determines the sort order of results. ASC for ascending, DESC for descending order
         */
        order?: 'ASC' | 'DESC';
        /**
         * Specifies the field by which to sort the campaigns. Available options are 'name', 'status', 'created_at', and 'updated_at'
         */
        order_by?: 'name' | 'status' | 'created_at' | 'updated_at';
        /**
         * SQL query expression to filter campaigns by custom criteria
         */
        query?: string;
    };
    url: '/campaigns';
};

export type GetCampaignsResponses = {
    /**
     * list of campaigns
     */
    200: {
        data?: {
            results?: Array<Campaign>;
            query?: string;
            total?: number;
            per_page?: number;
            page?: number;
        };
    };
};

export type GetCampaignsResponse = GetCampaignsResponses[keyof GetCampaignsResponses];

export type CreateCampaignData = {
    /**
     * new campaign info
     */
    body?: CampaignRequest;
    path?: never;
    query?: never;
    url: '/campaigns';
};

export type CreateCampaignResponses = {
    /**
     * new campaign object
     */
    200: {
        data?: CampaignUpdate;
    };
};

export type CreateCampaignResponse = CreateCampaignResponses[keyof CreateCampaignResponses];

export type DeleteCampaignByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the campaign you want to get.
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}';
};

export type DeleteCampaignByIdResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type DeleteCampaignByIdResponse = DeleteCampaignByIdResponses[keyof DeleteCampaignByIdResponses];

export type GetCampaignByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the campaign you want to get.
         */
        id: number;
    };
    query?: {
        /**
         * boolean flag for response with/without body
         */
        no_body?: boolean;
    };
    url: '/campaigns/{id}';
};

export type GetCampaignByIdResponses = {
    /**
     * campaign object
     */
    200: {
        data?: Campaign;
    };
};

export type GetCampaignByIdResponse = GetCampaignByIdResponses[keyof GetCampaignByIdResponses];

export type UpdateCampaignByIdData = {
    /**
     * updated campaign fields
     */
    body?: CampaignRequest;
    path: {
        /**
         * the id value of campaign you want to update
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}';
};

export type UpdateCampaignByIdResponses = {
    /**
     * updated campaign object
     */
    200: {
        data?: CampaignUpdate;
    };
};

export type UpdateCampaignByIdResponse = UpdateCampaignByIdResponses[keyof UpdateCampaignByIdResponses];

export type GetRunningCampaignStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Campaign IDs to get stats for.
         */
        campaign_id: number;
    };
    url: '/campaigns/running/stats';
};

export type GetRunningCampaignStatsResponses = {
    /**
     * list of stats for given set of campaign ids
     */
    200: {
        data?: Array<CampaignStats>;
    };
};

export type GetRunningCampaignStatsResponse = GetRunningCampaignStatsResponses[keyof GetRunningCampaignStatsResponses];

export type GetCampaignAnalyticsData = {
    body?: never;
    path: {
        /**
         * type of stats, either links, view, click or bounce
         */
        type: 'links' | 'views' | 'clicks' | 'bounces';
    };
    query: {
        /**
         * start value of date range
         */
        from: string;
        /**
         * end value of date range
         */
        to: string;
        /**
         * campaign id/s to retrive view counts
         */
        id: string;
    };
    url: '/campaigns/analytics/{type}';
};

export type GetCampaignAnalyticsResponses = {
    /**
     * list of stats for given set of campaign ids
     */
    200: {
        data?: Array<CampaignAnalyticsCount>;
    };
};

export type GetCampaignAnalyticsResponse = GetCampaignAnalyticsResponses[keyof GetCampaignAnalyticsResponses];

export type PreviewCampaignByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the campaign you want to get the preview of
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/preview';
};

export type PreviewCampaignByIdResponses = {
    /**
     * HTML Preview of requested campaign
     */
    200: string;
};

export type PreviewCampaignByIdResponse = PreviewCampaignByIdResponses[keyof PreviewCampaignByIdResponses];

export type UpdatePreviewCampaignByIdData = {
    /**
     * template id, body and content type
     */
    body: {
        /**
         * template id
         */
        template_id?: number;
        /**
         * content type
         */
        content_type?: string;
        /**
         * template body
         */
        body?: string;
    };
    path: {
        /**
         * The id value of the campaign you want to get the preview of
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/preview';
};

export type UpdatePreviewCampaignByIdResponses = {
    /**
     * HTML Preview of requested campaign
     */
    200: string;
};

export type UpdatePreviewCampaignByIdResponse = UpdatePreviewCampaignByIdResponses[keyof UpdatePreviewCampaignByIdResponses];

export type PreviewCampaignTextByIdData = {
    /**
     * template id, content type and campaign body
     */
    body: {
        /**
         * template id
         */
        template_id?: number;
        /**
         * content type
         */
        content_type?: string;
        /**
         * campaign body
         */
        body?: string;
    };
    path: {
        /**
         * The id value of the campaign you want to get the preview of
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/text';
};

export type PreviewCampaignTextByIdResponses = {
    /**
     * response
     */
    200: string;
};

export type PreviewCampaignTextByIdResponse = PreviewCampaignTextByIdResponses[keyof PreviewCampaignTextByIdResponses];

export type UpdateCampaignStatusByIdData = {
    /**
     * campaign status update
     */
    body?: {
        status?: 'scheduled' | 'running' | 'paused' | 'cancelled';
    };
    path: {
        /**
         * The id value of the campaign you want to get the preview of
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/status';
};

export type UpdateCampaignStatusByIdResponses = {
    /**
     * response
     */
    200: {
        data?: Campaign;
    };
};

export type UpdateCampaignStatusByIdResponse = UpdateCampaignStatusByIdResponses[keyof UpdateCampaignStatusByIdResponses];

export type UpdateCampaignArchiveByIdData = {
    /**
     * archive campaign related parameters
     */
    body?: {
        archive?: boolean;
        archive_template_id?: number;
        archive_meta?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * The id value of the campaign you want to get the preview of
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/archive';
};

export type UpdateCampaignArchiveByIdResponses = {
    /**
     * response
     */
    200: {
        data?: boolean;
    };
};

export type UpdateCampaignArchiveByIdResponse = UpdateCampaignArchiveByIdResponses[keyof UpdateCampaignArchiveByIdResponses];

export type CreateCampaignContentByIdData = {
    /**
     * updated campaign content
     */
    body?: CampaignContentRequest;
    path: {
        /**
         * ID of campaign that you choose to create content
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/content';
};

export type CreateCampaignContentByIdResponses = {
    /**
     * response
     */
    200: {
        data?: string;
    };
};

export type CreateCampaignContentByIdResponse = CreateCampaignContentByIdResponses[keyof CreateCampaignContentByIdResponses];

export type TestCampaignByIdData = {
    /**
     * template id
     */
    body: CampaignRequest;
    path: {
        /**
         * ID of campaign that you want to test
         */
        id: number;
    };
    query?: never;
    url: '/campaigns/{id}/test';
};

export type TestCampaignByIdResponses = {
    /**
     * response
     */
    200: {
        data?: boolean;
    };
};

export type TestCampaignByIdResponse = TestCampaignByIdResponses[keyof TestCampaignByIdResponses];

export type GetMediaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/media';
};

export type GetMediaResponses = {
    /**
     * response
     */
    200: {
        data?: Array<MediaFileObject>;
    };
};

export type GetMediaResponse = GetMediaResponses[keyof GetMediaResponses];

export type UploadMediaData = {
    /**
     * upload media file
     */
    body?: Blob | File;
    path?: never;
    query?: never;
    url: '/media';
};

export type UploadMediaResponses = {
    /**
     * response
     */
    200: {
        data?: MediaFileObject;
    };
};

export type UploadMediaResponse = UploadMediaResponses[keyof UploadMediaResponses];

export type DeleteMediaByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the list you want to delete.
         */
        id: number;
    };
    query?: never;
    url: '/media/{id}';
};

export type DeleteMediaByIdResponses = {
    /**
     * response
     */
    200: {
        data?: boolean;
    };
};

export type DeleteMediaByIdResponse = DeleteMediaByIdResponses[keyof DeleteMediaByIdResponses];

export type GetMediaByIdData = {
    body?: never;
    path: {
        /**
         * media file id
         */
        id: number;
    };
    query?: never;
    url: '/media/{id}';
};

export type GetMediaByIdResponses = {
    /**
     * response
     */
    200: {
        data?: MediaFileObject;
    };
};

export type GetMediaByIdResponse = GetMediaByIdResponses[keyof GetMediaByIdResponses];

export type GetTemplatesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * boolean flag for response with/without body
         */
        no_body: boolean;
    };
    url: '/templates';
};

export type GetTemplatesResponses = {
    /**
     * response
     */
    200: {
        data?: Array<Template>;
    };
};

export type GetTemplatesResponse = GetTemplatesResponses[keyof GetTemplatesResponses];

export type DeleteTemplateByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the template you want to delete.
         */
        id: number;
    };
    query?: never;
    url: '/templates/{id}';
};

export type DeleteTemplateByIdResponses = {
    /**
     * response
     */
    200: {
        data?: boolean;
    };
};

export type DeleteTemplateByIdResponse = DeleteTemplateByIdResponses[keyof DeleteTemplateByIdResponses];

export type GetTemplateByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the template you want to get.
         */
        id: number;
    };
    query?: {
        /**
         * boolean flag for response with/without body
         */
        no_body?: boolean;
    };
    url: '/templates/{id}';
};

export type GetTemplateByIdResponses = {
    /**
     * response
     */
    200: {
        data?: Template;
    };
};

export type GetTemplateByIdResponse = GetTemplateByIdResponses[keyof GetTemplateByIdResponses];

export type PreviewTemplateData = {
    /**
     * template parameters
     */
    body: {
        /**
         * type of template
         */
        template_type?: string;
        /**
         * template body
         */
        body?: string;
    };
    path?: never;
    query?: never;
    url: '/templates/preview';
};

export type PreviewTemplateResponses = {
    /**
     * response
     */
    200: string;
};

export type PreviewTemplateResponse = PreviewTemplateResponses[keyof PreviewTemplateResponses];

export type PreviewTemplateByIdData = {
    /**
     * template parameters
     */
    body: {
        /**
         * type of template
         */
        template_type?: string;
        /**
         * template body
         */
        body?: string;
    };
    path: {
        /**
         * The id value of the template you want to get.
         */
        id: number;
    };
    query?: never;
    url: '/templates/{id}/preview';
};

export type PreviewTemplateByIdResponses = {
    /**
     * response
     */
    200: string;
};

export type PreviewTemplateByIdResponse = PreviewTemplateByIdResponses[keyof PreviewTemplateByIdResponses];

export type UpdateTemplateByIdData = {
    body?: never;
    path: {
        /**
         * The id value of the template you want to set to the default template.
         */
        id: number;
    };
    query?: never;
    url: '/templates/{id}/default';
};

export type UpdateTemplateByIdResponses = {
    /**
     * response
     */
    200: Template;
};

export type UpdateTemplateByIdResponse = UpdateTemplateByIdResponses[keyof UpdateTemplateByIdResponses];

export type TransactWithSubscriberData = {
    /**
     * email message to a subscriber
     */
    body?: TransactionalMessage;
    path?: never;
    query?: never;
    url: '/tx';
};

export type TransactWithSubscriberResponses = {
    /**
     * OK
     */
    200: {
        data?: boolean;
    };
};

export type TransactWithSubscriberResponse = TransactWithSubscriberResponses[keyof TransactWithSubscriberResponses];

export type DeleteGcSubscribersData = {
    body?: never;
    path: {
        /**
         * type of GC collected subscribers
         */
        type: string;
    };
    query?: never;
    url: '/maintenance/subscribers/{type}';
};

export type DeleteGcSubscribersResponses = {
    /**
     * response
     */
    200: {
        data?: {
            count?: number;
        };
    };
};

export type DeleteGcSubscribersResponse = DeleteGcSubscribersResponses[keyof DeleteGcSubscribersResponses];

export type DeleteCampaignAnalyticsByTypeData = {
    /**
     * date parameter
     */
    body: {
        before_date?: string;
    };
    path: {
        /**
         * type of GC collected subscribers
         */
        type: string;
    };
    query?: never;
    url: '/maintenance/analytics/{type}';
};

export type DeleteCampaignAnalyticsByTypeResponses = {
    /**
     * response
     */
    200: {
        data?: boolean;
    };
};

export type DeleteCampaignAnalyticsByTypeResponse = DeleteCampaignAnalyticsByTypeResponses[keyof DeleteCampaignAnalyticsByTypeResponses];

export type DeleteUnconfirmedSubscriptionsData = {
    /**
     * date parameter
     */
    body: {
        before_date?: string;
    };
    path?: never;
    query?: never;
    url: '/maintenance/subscriptions/unconfirmed';
};

export type DeleteUnconfirmedSubscriptionsResponses = {
    /**
     * response
     */
    200: {
        data?: {
            count?: number;
        };
    };
};

export type DeleteUnconfirmedSubscriptionsResponse = DeleteUnconfirmedSubscriptionsResponses[keyof DeleteUnconfirmedSubscriptionsResponses];

export type GetPublicListsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/public/lists';
};

export type GetPublicListsResponses = {
    /**
     * response
     */
    200: Array<{
        uuid?: string;
        name?: string;
    }>;
};

export type GetPublicListsResponse = GetPublicListsResponses[keyof GetPublicListsResponses];

export type HandlePublicSubscriptionData = {
    /**
     * subscription request parameters
     */
    body?: {
        name?: string;
        email?: string;
        list_uuids?: Array<string>;
    };
    path?: never;
    query?: never;
    url: '/public/subscription';
};

export type HandlePublicSubscriptionResponses = {
    /**
     * response
     */
    200: {
        has_optin?: boolean;
    };
};

export type HandlePublicSubscriptionResponse = HandlePublicSubscriptionResponses[keyof HandlePublicSubscriptionResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:9000/api' | (string & {});
};