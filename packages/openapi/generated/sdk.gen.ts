// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { GetHealthCheckData, GetHealthCheckResponses, GetServerConfigData, GetServerConfigResponses, GetI18nLangData, GetI18nLangResponses, GetDashboardChartsData, GetDashboardChartsResponses, GetDashboardCountsData, GetDashboardCountsResponses, GetSettingsData, GetSettingsResponses, UpdateSettingsData, UpdateSettingsResponses, TestSmtpSettingsData, TestSmtpSettingsResponses, ReloadAppData, ReloadAppResponses, GetLogsData, GetLogsResponses, DeleteSubscriberByListData, DeleteSubscriberByListResponses, GetSubscribersData, GetSubscribersResponses, CreateSubscriberData, CreateSubscriberResponses, DeleteSubscriberByIdData, DeleteSubscriberByIdResponses, GetSubscriberByIdData, GetSubscriberByIdResponses, UpdateSubscriberByIdData, UpdateSubscriberByIdResponses, ManageSubscriberListsData, ManageSubscriberListsResponses, ManageSubscriberListByIdData, ManageSubscriberListByIdResponses, ManageBlocklistBySubscriberListData, ManageBlocklistBySubscriberListResponses, ManageBlocklistSubscribersByIdData, ManageBlocklistSubscribersByIdResponses, ExportSubscriberDataByIdData, ExportSubscriberDataByIdResponses, DeleteSubscriberBouncesByIdData, DeleteSubscriberBouncesByIdResponses, GetSubscriberBouncesByIdData, GetSubscriberBouncesByIdResponses, SubscriberSendOptinByIdData, SubscriberSendOptinByIdResponses, DeleteSubscriberByQueryData, DeleteSubscriberByQueryResponses, BlocklistSubscribersQueryData, BlocklistSubscribersQueryResponses, ManageSubscriberListsByQueryData, ManageSubscriberListsByQueryResponses, DeleteBouncesData, DeleteBouncesResponses, GetBouncesData, GetBouncesResponses, DeleteBounceByIdData, DeleteBounceByIdResponses, GetBounceByIdData, GetBounceByIdResponses, GetListsData, GetListsResponses, CreateListData, CreateListResponses, DeleteListByIdData, DeleteListByIdResponses, GetListByIdData, GetListByIdResponses, UpdateListByIdData, UpdateListByIdResponses, StopImportSubscribersData, StopImportSubscribersResponses, GetImportSubscribersData, GetImportSubscribersResponses, ImportSubscribersData, ImportSubscribersResponses, GetImportSubscriberStatsData, GetImportSubscriberStatsResponses, GetCampaignsData, GetCampaignsResponses, CreateCampaignData, CreateCampaignResponses, DeleteCampaignByIdData, DeleteCampaignByIdResponses, GetCampaignByIdData, GetCampaignByIdResponses, UpdateCampaignByIdData, UpdateCampaignByIdResponses, GetRunningCampaignStatsData, GetRunningCampaignStatsResponses, GetCampaignAnalyticsData, GetCampaignAnalyticsResponses, PreviewCampaignByIdData, PreviewCampaignByIdResponses, UpdatePreviewCampaignByIdData, UpdatePreviewCampaignByIdResponses, PreviewCampaignTextByIdData, PreviewCampaignTextByIdResponses, UpdateCampaignStatusByIdData, UpdateCampaignStatusByIdResponses, UpdateCampaignArchiveByIdData, UpdateCampaignArchiveByIdResponses, CreateCampaignContentByIdData, CreateCampaignContentByIdResponses, TestCampaignByIdData, TestCampaignByIdResponses, GetMediaData, GetMediaResponses, UploadMediaData, UploadMediaResponses, DeleteMediaByIdData, DeleteMediaByIdResponses, GetMediaByIdData, GetMediaByIdResponses, GetTemplatesData, GetTemplatesResponses, DeleteTemplateByIdData, DeleteTemplateByIdResponses, GetTemplateByIdData, GetTemplateByIdResponses, PreviewTemplateData, PreviewTemplateResponses, PreviewTemplateByIdData, PreviewTemplateByIdResponses, UpdateTemplateByIdData, UpdateTemplateByIdResponses, TransactWithSubscriberData, TransactWithSubscriberResponses, DeleteGcSubscribersData, DeleteGcSubscribersResponses, DeleteCampaignAnalyticsByTypeData, DeleteCampaignAnalyticsByTypeResponses, DeleteUnconfirmedSubscriptionsData, DeleteUnconfirmedSubscriptionsResponses, GetPublicListsData, GetPublicListsResponses, HandlePublicSubscriptionData, HandlePublicSubscriptionResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * healthcheck endpoint
 */
export const getHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<GetHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthCheckResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * returns general server config.
 */
export const getServerConfig = <ThrowOnError extends boolean = false>(options?: Options<GetServerConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerConfigResponses, unknown, ThrowOnError>({
        url: '/config',
        ...options
    });
};

/**
 * returns the JSON language pack given the language code
 */
export const getI18nLang = <ThrowOnError extends boolean = false>(options: Options<GetI18nLangData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetI18nLangResponses, unknown, ThrowOnError>({
        url: '/lang/{lang}',
        ...options
    });
};

/**
 * returns chart data points to render on the dashboard.
 */
export const getDashboardCharts = <ThrowOnError extends boolean = false>(options?: Options<GetDashboardChartsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDashboardChartsResponses, unknown, ThrowOnError>({
        url: '/dashboard/charts',
        ...options
    });
};

/**
 * returns stats counts to show on the dashboard
 */
export const getDashboardCounts = <ThrowOnError extends boolean = false>(options?: Options<GetDashboardCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDashboardCountsResponses, unknown, ThrowOnError>({
        url: '/dashboard/counts',
        ...options
    });
};

/**
 * returns settings from DB
 */
export const getSettings = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsResponses, unknown, ThrowOnError>({
        url: '/settings',
        ...options
    });
};

/**
 * returns updated settings from the DB.
 */
export const updateSettings = <ThrowOnError extends boolean = false>(options?: Options<UpdateSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateSettingsResponses, unknown, ThrowOnError>({
        url: '/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * test smtp settings
 */
export const testSmtpSettings = <ThrowOnError extends boolean = false>(options?: Options<TestSmtpSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TestSmtpSettingsResponses, unknown, ThrowOnError>({
        url: '/settings/smtp/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * restarts the app
 */
export const reloadApp = <ThrowOnError extends boolean = false>(options?: Options<ReloadAppData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReloadAppResponses, unknown, ThrowOnError>({
        url: '/admin/reload',
        ...options
    });
};

/**
 * returns the log entries stored in the log buffer
 */
export const getLogs = <ThrowOnError extends boolean = false>(options?: Options<GetLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogsResponses, unknown, ThrowOnError>({
        url: '/logs',
        ...options
    });
};

/**
 * handles subscribers deletion
 */
export const deleteSubscriberByList = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriberByListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubscriberByListResponses, unknown, ThrowOnError>({
        url: '/subscribers',
        ...options
    });
};

/**
 * returns all subscribers.
 */
export const getSubscribers = <ThrowOnError extends boolean = false>(options?: Options<GetSubscribersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubscribersResponses, unknown, ThrowOnError>({
        url: '/subscribers',
        ...options
    });
};

/**
 * handles creation of new subscriber
 */
export const createSubscriber = <ThrowOnError extends boolean = false>(options?: Options<CreateSubscriberData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateSubscriberResponses, unknown, ThrowOnError>({
        url: '/subscribers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * handles subscriber deletion based on id
 */
export const deleteSubscriberById = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubscriberByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}',
        ...options
    });
};

/**
 * handles the retrieval of a single subscriber by ID.
 */
export const getSubscriberById = <ThrowOnError extends boolean = false>(options: Options<GetSubscriberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubscriberByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}',
        ...options
    });
};

/**
 * modify subscriber data
 */
export const updateSubscriberById = <ThrowOnError extends boolean = false>(options: Options<UpdateSubscriberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSubscriberByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * handles bulk addition or removal of subscribers
 */
export const manageSubscriberLists = <ThrowOnError extends boolean = false>(options?: Options<ManageSubscriberListsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ManageSubscriberListsResponses, unknown, ThrowOnError>({
        url: '/subscribers/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * handles bulk addition or removal of subscribers for a specified list id
 */
export const manageSubscriberListById = <ThrowOnError extends boolean = false>(options: Options<ManageSubscriberListByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ManageSubscriberListByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/lists/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * handles blocklisting of subscriber list
 */
export const manageBlocklistBySubscriberList = <ThrowOnError extends boolean = false>(options?: Options<ManageBlocklistBySubscriberListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ManageBlocklistBySubscriberListResponses, unknown, ThrowOnError>({
        url: '/subscribers/blocklist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * handles the blocklisting of one or more subscribers.
 */
export const manageBlocklistSubscribersById = <ThrowOnError extends boolean = false>(options: Options<ManageBlocklistSubscribersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ManageBlocklistSubscribersByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}/blocklist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * retrieves a subscriber's profile
 */
export const exportSubscriberDataById = <ThrowOnError extends boolean = false>(options: Options<ExportSubscriberDataByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportSubscriberDataByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}/export',
        ...options
    });
};

/**
 * deletes a subscriber's bounce records
 */
export const deleteSubscriberBouncesById = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriberBouncesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubscriberBouncesByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}/bounces',
        ...options
    });
};

/**
 * retrieves a subscriber's bounce records
 */
export const getSubscriberBouncesById = <ThrowOnError extends boolean = false>(options: Options<GetSubscriberBouncesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubscriberBouncesByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}/bounces',
        ...options
    });
};

/**
 * sends an optin confirmation e-mail to a subscriber.
 */
export const subscriberSendOptinById = <ThrowOnError extends boolean = false>(options: Options<SubscriberSendOptinByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriberSendOptinByIdResponses, unknown, ThrowOnError>({
        url: '/subscribers/{id}/optin',
        ...options
    });
};

/**
 * bulk deletes based on an arbitrary SQL expression.
 */
export const deleteSubscriberByQuery = <ThrowOnError extends boolean = false>(options?: Options<DeleteSubscriberByQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DeleteSubscriberByQueryResponses, unknown, ThrowOnError>({
        url: '/subscribers/query/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * bulk blocklists subscribers based on an arbitrary SQL expression.
 */
export const blocklistSubscribersQuery = <ThrowOnError extends boolean = false>(options?: Options<BlocklistSubscribersQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<BlocklistSubscribersQueryResponses, unknown, ThrowOnError>({
        url: '/subscribers/query/blocklist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * bulk adds/removes/unsubscribes subscribers from one or more lists based on an arbitrary SQL expression.
 */
export const manageSubscriberListsByQuery = <ThrowOnError extends boolean = false>(options?: Options<ManageSubscriberListsByQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ManageSubscriberListsByQueryResponses, unknown, ThrowOnError>({
        url: '/subscribers/query/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * handles retrieval of bounce records.
 */
export const deleteBounces = <ThrowOnError extends boolean = false>(options?: Options<DeleteBouncesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteBouncesResponses, unknown, ThrowOnError>({
        url: '/bounces',
        ...options
    });
};

/**
 * handles retrieval of bounce records.
 */
export const getBounces = <ThrowOnError extends boolean = false>(options?: Options<GetBouncesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBouncesResponses, unknown, ThrowOnError>({
        url: '/bounces',
        ...options
    });
};

/**
 * handles bounce deletion, either a single one (ID in the URI), or a list.
 */
export const deleteBounceById = <ThrowOnError extends boolean = false>(options: Options<DeleteBounceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBounceByIdResponses, unknown, ThrowOnError>({
        url: '/bounces/{id}',
        ...options
    });
};

/**
 * handles retrieval of bounce record by id
 */
export const getBounceById = <ThrowOnError extends boolean = false>(options: Options<GetBounceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBounceByIdResponses, unknown, ThrowOnError>({
        url: '/bounces/{id}',
        ...options
    });
};

/**
 * retrieves lists with additional metadata like subscriber counts. This may be slow.
 */
export const getLists = <ThrowOnError extends boolean = false>(options?: Options<GetListsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetListsResponses, unknown, ThrowOnError>({
        url: '/lists',
        ...options
    });
};

/**
 * handles list creation
 */
export const createList = <ThrowOnError extends boolean = false>(options?: Options<CreateListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateListResponses, unknown, ThrowOnError>({
        url: '/lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * handles list deletion, either a single one (ID in the URI), or a list.
 */
export const deleteListById = <ThrowOnError extends boolean = false>(options: Options<DeleteListByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteListByIdResponses, unknown, ThrowOnError>({
        url: '/lists/{list_id}',
        ...options
    });
};

/**
 * retrieves lists with additional metadata like subscriber counts. This may be slow.
 */
export const getListById = <ThrowOnError extends boolean = false>(options: Options<GetListByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetListByIdResponses, unknown, ThrowOnError>({
        url: '/lists/{list_id}',
        ...options
    });
};

/**
 * handles list modification
 */
export const updateListById = <ThrowOnError extends boolean = false>(options: Options<UpdateListByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateListByIdResponses, unknown, ThrowOnError>({
        url: '/lists/{list_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * sends a stop signal to the importer.
 */
export const stopImportSubscribers = <ThrowOnError extends boolean = false>(options?: Options<StopImportSubscribersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<StopImportSubscribersResponses, unknown, ThrowOnError>({
        url: '/import/subscribers',
        ...options
    });
};

/**
 * returns import status.
 */
export const getImportSubscribers = <ThrowOnError extends boolean = false>(options?: Options<GetImportSubscribersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetImportSubscribersResponses, unknown, ThrowOnError>({
        url: '/import/subscribers',
        ...options
    });
};

/**
 * handles the uploading and bulk importing of a ZIP file of one or more CSV files.
 */
export const importSubscribers = <ThrowOnError extends boolean = false>(options?: Options<ImportSubscribersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ImportSubscribersResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/import/subscribers',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * returns import statistics
 */
export const getImportSubscriberStats = <ThrowOnError extends boolean = false>(options?: Options<GetImportSubscriberStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetImportSubscriberStatsResponses, unknown, ThrowOnError>({
        url: '/import/subscribers/logs',
        ...options
    });
};

/**
 * handles retrieval of campaigns
 */
export const getCampaigns = <ThrowOnError extends boolean = false>(options?: Options<GetCampaignsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCampaignsResponses, unknown, ThrowOnError>({
        url: '/campaigns',
        ...options
    });
};

/**
 * handles campaign creation
 */
export const createCampaign = <ThrowOnError extends boolean = false>(options?: Options<CreateCampaignData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCampaignResponses, unknown, ThrowOnError>({
        url: '/campaigns',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * deletes specified campaign
 */
export const deleteCampaignById = <ThrowOnError extends boolean = false>(options: Options<DeleteCampaignByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCampaignByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}',
        ...options
    });
};

/**
 * handles retrieval of campaigns.
 */
export const getCampaignById = <ThrowOnError extends boolean = false>(options: Options<GetCampaignByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampaignByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}',
        ...options
    });
};

/**
 * handle updation of campaign
 */
export const updateCampaignById = <ThrowOnError extends boolean = false>(options: Options<UpdateCampaignByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCampaignByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * returns stats of a given set of campaign IDs.
 */
export const getRunningCampaignStats = <ThrowOnError extends boolean = false>(options: Options<GetRunningCampaignStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRunningCampaignStatsResponses, unknown, ThrowOnError>({
        url: '/campaigns/running/stats',
        ...options
    });
};

/**
 * retrieves view counts for a campaign.
 */
export const getCampaignAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetCampaignAnalyticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampaignAnalyticsResponses, unknown, ThrowOnError>({
        url: '/campaigns/analytics/{type}',
        ...options
    });
};

/**
 * renders the HTML preview of a campaign body
 */
export const previewCampaignById = <ThrowOnError extends boolean = false>(options: Options<PreviewCampaignByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PreviewCampaignByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}/preview',
        ...options
    });
};

/**
 * renders the HTML preview of a campaign body
 */
export const updatePreviewCampaignById = <ThrowOnError extends boolean = false>(options: Options<UpdatePreviewCampaignByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePreviewCampaignByIdResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/campaigns/{id}/preview',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * renders the HTML preview of a campaign body
 */
export const previewCampaignTextById = <ThrowOnError extends boolean = false>(options: Options<PreviewCampaignTextByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PreviewCampaignTextByIdResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/campaigns/{id}/text',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * handles campaign status modification
 */
export const updateCampaignStatusById = <ThrowOnError extends boolean = false>(options: Options<UpdateCampaignStatusByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCampaignStatusByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * handles campaign status modification
 */
export const updateCampaignArchiveById = <ThrowOnError extends boolean = false>(options: Options<UpdateCampaignArchiveByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCampaignArchiveByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}/archive',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * handles campaign content (body) format conversions.
 */
export const createCampaignContentById = <ThrowOnError extends boolean = false>(options: Options<CreateCampaignContentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCampaignContentByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * handles sending of campaign message to arbitrary subscribers for testing
 */
export const testCampaignById = <ThrowOnError extends boolean = false>(options: Options<TestCampaignByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestCampaignByIdResponses, unknown, ThrowOnError>({
        url: '/campaigns/{id}/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * handles retrieval of uploaded media.
 */
export const getMedia = <ThrowOnError extends boolean = false>(options?: Options<GetMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaResponses, unknown, ThrowOnError>({
        url: '/media',
        ...options
    });
};

/**
 * handles media file uploads.
 */
export const uploadMedia = <ThrowOnError extends boolean = false>(options?: Options<UploadMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadMediaResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/media',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * handles deletion of uploaded media.
 */
export const deleteMediaById = <ThrowOnError extends boolean = false>(options: Options<DeleteMediaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMediaByIdResponses, unknown, ThrowOnError>({
        url: '/media/{id}',
        ...options
    });
};

/**
 * handles retrieval of uploaded media.
 */
export const getMediaById = <ThrowOnError extends boolean = false>(options: Options<GetMediaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaByIdResponses, unknown, ThrowOnError>({
        url: '/media/{id}',
        ...options
    });
};

/**
 * handles retrieval of templates
 */
export const getTemplates = <ThrowOnError extends boolean = false>(options: Options<GetTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplatesResponses, unknown, ThrowOnError>({
        url: '/templates',
        ...options
    });
};

/**
 * handles deletion of templates
 */
export const deleteTemplateById = <ThrowOnError extends boolean = false>(options: Options<DeleteTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTemplateByIdResponses, unknown, ThrowOnError>({
        url: '/templates/{id}',
        ...options
    });
};

/**
 * handles retrieval of templates
 */
export const getTemplateById = <ThrowOnError extends boolean = false>(options: Options<GetTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplateByIdResponses, unknown, ThrowOnError>({
        url: '/templates/{id}',
        ...options
    });
};

/**
 * get the HTML preview of a template.
 */
export const previewTemplate = <ThrowOnError extends boolean = false>(options: Options<PreviewTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PreviewTemplateResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/templates/preview',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * renders the HTML preview of a template.
 */
export const previewTemplateById = <ThrowOnError extends boolean = false>(options: Options<PreviewTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PreviewTemplateByIdResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/templates/{id}/preview',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * handles template modification.
 */
export const updateTemplateById = <ThrowOnError extends boolean = false>(options: Options<UpdateTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTemplateByIdResponses, unknown, ThrowOnError>({
        url: '/templates/{id}/default',
        ...options
    });
};

/**
 * send message to a subscriber
 */
export const transactWithSubscriber = <ThrowOnError extends boolean = false>(options?: Options<TransactWithSubscriberData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TransactWithSubscriberResponses, unknown, ThrowOnError>({
        url: '/tx',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * garbage collects (deletes) orphaned or blocklisted subscribers.
 */
export const deleteGcSubscribers = <ThrowOnError extends boolean = false>(options: Options<DeleteGcSubscribersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGcSubscribersResponses, unknown, ThrowOnError>({
        url: '/maintenance/subscribers/{type}',
        ...options
    });
};

/**
 * garbage collects (deletes) campaign analytics.
 */
export const deleteCampaignAnalyticsByType = <ThrowOnError extends boolean = false>(options: Options<DeleteCampaignAnalyticsByTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCampaignAnalyticsByTypeResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/maintenance/analytics/{type}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * garbage collects (deletes) orphaned or blocklisted subscribers.
 */
export const deleteUnconfirmedSubscriptions = <ThrowOnError extends boolean = false>(options: Options<DeleteUnconfirmedSubscriptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUnconfirmedSubscriptionsResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/maintenance/subscriptions/unconfirmed',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * returns the list of public lists with minimal fields
 */
export const getPublicLists = <ThrowOnError extends boolean = false>(options?: Options<GetPublicListsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicListsResponses, unknown, ThrowOnError>({
        url: '/public/lists',
        ...options
    });
};

/**
 * handles subscription requests coming from public API calls.
 */
export const handlePublicSubscription = <ThrowOnError extends boolean = false>(options?: Options<HandlePublicSubscriptionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<HandlePublicSubscriptionResponses, unknown, ThrowOnError>({
        url: '/public/subscription',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};